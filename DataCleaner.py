#!/usr/bin/env python
# coding: utf-8

# In[7]:


import os
#读取每条数据
def loadRawLabel(filename):
    #用于存储文件名对应的类别
    nameToClass = {}
    #读取clamav生成的分类结果
    with open(filename) as dataFile:
        for line in dataFile:
            line = line.strip('\n')
            #清理-v遗留的无效输出行
            if 'Scanning' in line:
                continue
            #空格分割每一行的要素，前者为文件名，后者为类别
            row = line.split(' ')

            #row[0] 为文件名，row[1]为类别
            tmp = row[0][:-1].split('_')
            malwareName = tmp[1]
            tmp = row[1].split('.')
            if tmp[0] == 'OK':
                malwareClass = tmp[0]
            else :
                malwareClass = tmp[1]
            #加入到分类字典中
            nameToClass[malwareName] = malwareClass
        
    return nameToClass


# In[13]:


def generateClassCount(rawLabel):
    #遍历标签字典，生成类别计数
    labelCount = {}
    labelClass = []
    for filename,label in rawLabel.items():
        if label not in labelCount:
            labelCount[label] = 0
        else :
            labelCount[label] = labelCount[label] + 1
        if label not in labelClass:
            labelClass.append(label)
    
    return labelCount,labelClass


# In[84]:


import shutil
def rawDataToLabelData(nameToClass,classList = []):
    #将数据集重命名，分类
    filesname = []
    for root,path,files in os.walk('rawData/'):
        filesname.append(files)
    filesname = filesname[0]
    #重命名数据集
    for sourceFile in filesname:
        #文件不存在时，跳过
        fileHash = sourceFile.split('_')[1]
        if fileHash not in nameToClass.keys():
            continue
        fileClass = nameToClass[fileHash]
        fileClassIndex = 1
        #数据量太少的时候使用Binary
        if fileClass == 'OK':
            fileClassIndex = 0
        
        #大量数据的时候使用listIndex标记
        if not len(classList) == 0:
            fileClassIndex = classList.index(fileClass)
        srcFile = 'rawData/' + sourceFile
        dstFile = 'cleanData/' + fileHash + '_' + fileClass + '_' + str(fileClassIndex)
        shutil.move(srcFile,dstFile)
    
#rawDataToLabelData(loadRawLabel('raw.txt'))
    


# In[145]:


def loadApi():
    #读入系统API函数列表，返回API list
    APIFile = 'supportData/API.txt'
    with open(APIFile) as f:
        apis = f.readline()
    return apis.split(',')


# In[164]:


import pefile
import os
import progressbar
def featureExtraction(dirName = 'cleanData/'):
    #通过整理好的数据集，生成量化后的数据集和标签
    #feature为程序调用的APIs list
    APIs = loadApi()
    #特征向量
    AllFeatureList = []
    Label = []
    
    #遍历数据集文件夹
    for root,path,files in os.walk(dirName):
        files = files
        
        
    #进度条初始化
    widgets = ['Progress: ',progressbar.Percentage(), ' ', progressbar.Bar('#'),' ', progressbar.Timer(),
           ' ', progressbar.ETA()]
    pbar = ProgressBar(widgets=widgets, maxval=len(files)).start()
    i = 0
    #读取每一个数据，生成API调用特征
    for filename in files:
        
        pe = pefile.PE(dirName + filename)
        featureList = [[0]*(len(APIs)+1)][0]
        #查看pe的function import
        try:
            for dll in pe.DIRECTORY_ENTRY_IMPORT:
                for api in dll.imports:
                    if api.name in APIs:
                        featureList[APIs.index(api.name)] = featureList[APIs.index(api.name)] + 1
                    else:
                        featureList[len(featureList)-1] = featureList[len(featureList)-1] + 1
        except:
            continue
        fileClass = int(filename.split('_')[-1])
        AllFeatureList.append(featureList)
        Label.append(fileClass)
        
        #进度条更新
        pbar.update(i+1)
        i = i + 1
    #进度条结束
    pbar.finish()
    return AllFeatureList,Label         
        


# In[163]:


import numpy as np
def saveData(data,label):
    data = np.array(data)
    label = np.array(label)
    #save data and label
    np.savetxt('trainFile/train.txt',data)
    np.savetxt('trainFile/label.txt',label)
    
def loadData(path = 'trainFile/'):
    #load data and label from txt
    data = np.loadtxt(path + 'train.txt')
    label = np.loadtxt(path + 'label.txt')
    return data,label


# In[ ]:




