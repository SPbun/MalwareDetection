#!/usr/bin/env python
# coding: utf-8

# In[1]:


import tensorflow as tf
import DataCleaner
import numpy as np
import random


# In[2]:


data,label = DataCleaner.loadData()
data


# In[3]:


from keras.models import Sequential
from keras.layers import Activation, BatchNormalization, Flatten
from keras.layers import Dense, LSTM, Convolution1D, MaxPooling1D
from keras.layers.embeddings import Embedding
from keras.layers.wrappers import Bidirectional
def modelSelect(modelName,input_length = len(data[0])):
   
    QA_EMBED_SIZE = 64
    DROPOUT_RATE = 0.3
    model = Sequential()
    model.add(Embedding(1000, 64, input_length=input_length))
    if modelName == 'CBC':
         #CNN-BLSTM-CNN Model
        model.add(Convolution1D(filters=128, kernel_size=3, padding='valid', activation='relu'))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(MaxPooling1D(4))
        model.add(Bidirectional(LSTM(QA_EMBED_SIZE, return_sequences=True, dropout=DROPOUT_RATE, recurrent_dropout=DROPOUT_RATE)))
        model.add(Convolution1D(filters=128, kernel_size=3, padding='valid', activation='relu'))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(MaxPooling1D(4))
        model.add(Flatten())

        model.add(Dense(QA_EMBED_SIZE))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(Dense(1))
        model.add(BatchNormalization())
        model.add(Activation("sigmoid"))
    
    elif modelName == 'B':
        #BLSTM Model
        model.add(Bidirectional(LSTM(QA_EMBED_SIZE, return_sequences=False, dropout=DROPOUT_RATE, recurrent_dropout=DROPOUT_RATE)))
        model.add(Dense(QA_EMBED_SIZE))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(Dense(1))
        model.add(BatchNormalization())
        model.add(Activation("sigmoid"))
    
    elif modelName == 'CB':
        #CNN-BLSTM Model
        model.add(Convolution1D(filters=128, kernel_size=3, padding='valid', activation='relu'))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(MaxPooling1D(4))
        model.add(Bidirectional(LSTM(QA_EMBED_SIZE, return_sequences=False, dropout=DROPOUT_RATE, recurrent_dropout=DROPOUT_RATE)))
    
        model.add(Dense(QA_EMBED_SIZE))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(Dense(1))
        model.add(BatchNormalization())
        model.add(Activation("sigmoid"))
    elif modelName == 'BC':
        #BLSTM-CNN Model
        model.add(Bidirectional(LSTM(QA_EMBED_SIZE, return_sequences=True, dropout=DROPOUT_RATE, recurrent_dropout=DROPOUT_RATE)))
        model.add(Convolution1D(filters=128, kernel_size=3, padding='valid', activation='relu'))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(MaxPooling1D(4))
        model.add(Flatten())

        model.add(Dense(QA_EMBED_SIZE))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(Dense(1))
        model.add(BatchNormalization())
        model.add(Activation("sigmoid"))
    elif modelName == 'C':
        #CNN Model
        model.add(Convolution1D(filters=128, kernel_size=3, padding='valid', activation='relu'))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(MaxPooling1D(4))
        model.add(Flatten())

        model.add(Dense(QA_EMBED_SIZE))
        model.add(BatchNormalization())
        model.add(Activation('relu'))
        model.add(Dense(1))
        model.add(BatchNormalization())
        model.add(Activation("sigmoid"))
    #model.summary()
    return model

from keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard
from keras.utils import multi_gpu_model
import evaluate
from keras.utils import plot_model
from IPython import display

def plotModel(model,modelName):
    plot_model(model, to_file='img/' + modelName + '.png', show_shapes=True)
    display.Image('img/' + modelName + '.png')


def Deeplearning(X_train,Y_train,modelName):
    model=modelSelect(modelName)
    EPOCHS = 30
    BATCH_SIZE = 16
    VALIDATION_SPLIT=0.25
    
    early_stopping = EarlyStopping(monitor='val_loss', patience=10)
    model_path = 'model/model-cnn-blstm-cnn.h5'
    model_checkpoint = ModelCheckpoint(model_path, save_best_only=True, save_weights_only=True)
    tensorboard = TensorBoard('log/tflog-cnn-blstm-cnn', write_graph=True, write_images=True)

    model.compile(loss='binary_crossentropy',
                      optimizer='adam',
                      metrics=['accuracy', evaluate.precision, evaluate.recall, evaluate.f1, evaluate.fp, evaluate.tn, evaluate.fn, evaluate.tp])

    model.fit(X_train, Y_train, epochs=EPOCHS, batch_size=BATCH_SIZE, 
              validation_split=VALIDATION_SPLIT, shuffle=True, 
              callbacks=[early_stopping, model_checkpoint, tensorboard])
    return model


# In[23]:


modelCBC = Deeplearning(data,label,'CBC')
modelCBC.summary()
display.Image('img/' + 'CBC' + '.png')


# In[29]:


modelCB = Deeplearning(data,label,'CB')
modelCB.summary()
display.Image('img/' + 'CB' + '.png')


# In[33]:


modelBC = Deeplearning(data,label,'BC')
modelBC.summary()
display.Image('img/' + 'BC' + '.png')


# In[37]:


modelB = Deeplearning(data,label,'B')
modelB.summary()
display.Image('img/' + 'B' + '.png')


# In[7]:


modelC = Deeplearning(data,label,'C')
modelC.summary()
plotModel(modelC,'CNN')
display.Image('img/' + 'CNN' + '.png')

